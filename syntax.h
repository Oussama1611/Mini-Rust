#ifndef _SYNTAX_H
#define _SYNTAX_H

#include "erreurs.h"
#include "semantique.h"

void Test_Symbole(CODES_LEX cl, ERRORS_LEX er); 
void Test_Symbole_ID(CODES_LEX cl, TSYM TIDF, ERRORS_LEX er);


void DECL();
void DECL_STRUCT(); // DECLARATION D'UNE STRUCTURE
void DECL_FON(); // DECLARATION D'UNE FONCTION
void TYPE(); // LE TYPE (POUR CE PETIT MINI RUST ON A PRIS EN COMPTE QUE DE 3 TYPES : bool, NUM_TYPE_TOKEN(DEFINIT EN LEXIQUE) et ():UNIT_TOKEN )
void ARG(); // ARGUMENTS DES FONCTIONS
void BLOC(int fun_indicator,int loops_indicator); // DEFINITION D'UN BLOC 
void INSTR(int loops_indcator); // DEFINITION D'UNE INSTRUCTION , ELLE CONTIENT AUSSI LES INST DY TYPE WHILE LOOP FOR ...
void IF(int indic); // BLOC IF ELSE ...
void WHILE(); // BLOC WHILE
void LOOP(); // BLOC LOOP          // INDIC EST LA PROPAGATION DE LOOPS_INDICATOR
void FOR(); // BLOC FOR 
void EXPR(); // DEFENITION D'UNE EXPRESSION
void ARG_VERI();
void OPR(); // DEFENTION D'UNE OPERATION
void PRINT(); // AFFICHEAGE SUR CONSOLE : println!(...)
void NEG(); // DEFEINTION DE LA NEGATION : ARITHMETIQUE (-) OU LOGIQUE (!)
int IS_OPR(); // FONCTION INDICATRICE SI UN TOKEN EST UN OPERATEUR

#endif 